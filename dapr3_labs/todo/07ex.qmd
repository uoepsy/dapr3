---
title: "W7 Exercises: Questionnaire Data & Scale Scores"
params: 
    SHOW_SOLS: TRUE
    TOGGLE: TRUE
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| include: false
source('assets/setup.R')
library(xaringanExtra)
library(tidyverse)
library(patchwork)
xaringanExtra::use_panelset()
qcounter <- function(){
  if(!exists("qcounter_i")){
    qcounter_i <<- 1
  }else{
    qcounter_i <<- qcounter_i + 1
  }
  qcounter_i
}
```

```{r}
#| include: false
set.seed(9999)
N = 522
A = matrix(rnorm(6^2,0,.3)*2-1, ncol=6)
Xmat = MASS::mvrnorm(N, mu=rnorm(6,0,1), Sigma = t(A)%*%A)

Xmat2 = Xmat
Xmat2[1:174,] <- apply(Xmat2[1:174,], 2, function(x) x + rnorm(length(x),0,.5))
Xmat2[175:348,] <- apply(Xmat2[175:348,], 2, function(x) x -.079 + rnorm(length(x),0,.5))
Xmat2[349:522,] <- apply(Xmat2[349:522,], 2, function(x) x -.2 + rnorm(length(x),0,.5))

Xmat = cbind(Xmat,Xmat2)
Xmat = apply(Xmat, 2, function(x) as.numeric(cut(x,5)))
Xmat[,c(4:5,10:11)] <- 6 - Xmat[,c(4:5,10:11)]
#lp = apply(Xmat,2,scale) %*% rnorm(ncol(Xmat),0,1)

df = as.data.frame(cbind(Xmat[,1:6],rep(0:2,e=174),Xmat[,7:12]))
names(df) = c(paste0("t1_q",1:6),"task",paste0("t2_q",1:6))
head(df)

# df$t1_q4 <- 6 - df$t1_q4
# df$t1_q5 <- 6 - df$t1_q5
# df$t2_q4 <- 6 - df$t2_q4
# df$t2_q5 <- 6 - df$t2_q5
# 
# df$stress1 = rowSums(df[,1:6])
# df$stress2 = rowSums(df[,8:13])
# df$ch = df$stress2 - df$stress1
# hist(df$ch)
# with(df,boxplot(ch~task))
# lm(scale(ch)~factor(task),df) |> summary()
library(tidyverse)
bbdat <- df |> mutate(across(
  starts_with("t1"),
  ~case_match(.,
              1 ~ "Strongly Disagree",
              2 ~ "Disagree",
              3 ~ "Neither Disagree nor Agree",
              4 ~ "Agree",
              5 ~ "Strongly Agree"))) |>
  mutate(across(
    starts_with("t2"),
  ~case_match(.,
              1 ~ "Strongly Disagree",
              2 ~ "Disagree",
              3 ~ "Neither Disagree nor Agree",
              4 ~ "Agree",
              5 ~ "Strongly Agree"))) |>
  mutate(
    task = case_match(
      task,
      0 ~ "nothing",
      1 ~ "game",
      2 ~ "boxbreathing"
    )
  )
#write_csv(bbdat, "../../data/boxbreathe.csv")
```


:::frame
__Dataset:  boxbreathe.csv__

Researchers are interested in different methods for reducing stress. They recruit `r nrow(bbdat)` participants. All participants first filled out a 6-question measure of stress that is aimed to capture feelings of immediate stress and panic. All questions were scored on a 5-point likert scale from "Strongly Disagree" (1) to "Strongly Agree" (5). To obtain an overall measure of stress, participants' scores on the 6 questions are added together.  

After completing the initial stress measure, participants then completed one of three 5 minute tasks. One third of participants sat in silence for 5 minutes, one third played a picture-matching game on their phone for 5 minutes, and the remaining third completed 5 minutes of "box breathing" (inhale for 6, hold for 4, exhale for 6, hold for 4). After the 5 minutes, all participants filled out the same 6-item measure of stress.  

Researchers would like to know whether the different tasks are associated with differences in reduction in stress.  

__Dataset:__ [https://uoepsy.github.io/data/boxbreathe.csv](https://uoepsy.github.io/data/boxbreathe.csv){target="_blank"}

```{r}
#| echo: false
qitems = c("I feel a bit on edge right now.","I find it hard to focus because of how I'm feeling.","I feel like things are getting a little out of control.","I feel calm and steady in this moment.","I feel capable of managing the situation right now.","I feel somewhat restless or unsettled at the moment.")

tibble(
  variable=names(bbdat),
  description=c(
    paste0("(Time1) ",qitems),
    "Task completed (nothing / game / boxbreathing)",
  paste0("(Time2) ",qitems))
) |> gt::gt()
```

:::


`r qbegin(qcounter())`
Read in the data and have a look at it. 

- What does each _row_ represent?  
- What measurement(s) show us a person's stress?  

`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

Here's the data:
```{r}
bbdat <- read_csv("https://uoepsy.github.io/data/boxbreathe.csv")
head(bbdat)
```

Each row is a participant, and we have their stress measured at two time points. We can see that for each person there are 6 columns all measuring the construct of "stress" at each time point.  
And for each of those columns, there's a whole load of words in there! 

`r solend()`


`r qbegin(qcounter())`
First things first, our questionnaire software has given us the responses all in the descriptors used for each point of the likert scale, which is a bit annoying.  
Convert them all to numbers, which we can then work with.  

| What we have | What we want |
| ------------ | ------------ |
| Strongly Agree | 5 |
| Agree | 4 |
| Agree | 4 |
| Strongly Disagree | 1 |
| Neither Disagree nor Agree | 3 |
| Agree | 4 |
| Disagree | 2 |
| ... | ... |


::: {.callout-tip collapse="true"}
#### Hints

See [R7#variable-recoding](r07_qdata.html#variable-recoding){target="_blank"}.  


:::

`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

We want to turn _all_ of the variables from `t1_q1` to `t1_q6` _and_ from `t2_q1` to `t2_q6`, into numbers.  

To do it with one variable:  
```{r}
#| eval: false
bbdat |> mutate(
  t1_q1 = case_match(t1_q1,
                     "Strongly Disagree" ~ 1,
                     "Disagree" ~ 2,
                     "Neither Disagree nor Agree" ~ 3,
                     "Agree" ~ 4,
                     "Strongly Agree" ~ 5
  )
)
```

And we can do it to _all_ at once with `across()`.  
Note we have to specify two sets of columns because there's a column in the middle (the `task` column) that we _don't_ want to do anything to.  

```{r}
bbdat <- bbdat |> mutate(
  across(c(t1_q1:t1_q6, t2_q1:t2_q6),
         ~case_match(.,
                     "Strongly Disagree" ~ 1,
                     "Disagree" ~ 2,
                     "Neither Disagree nor Agree" ~ 3,
                     "Agree" ~ 4,
                     "Strongly Agree" ~ 5
         ))
  )

head(bbdat)
```

`r solend()`



`r qbegin(qcounter())`
Just looking at the data at time 1, create a correlation matrix of the various items that measure stress.  
What do you notice? Does it make sense given the wording of the questions?  
`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`


```{r}
cor(bbdat[,1:6])
```


Correlations are all positive except for those with Q4 and Q5. Q4 and Q5 are positively related, but they are negatively related to the other questions.  

This makes sense given the way the questions are worded - if people are feeling stressed, they will be more likely to _disagree_ to Q4 and Q5, but _agree_ with the others:  

```{r}
qitems
```

`r solend()`


`r qbegin(qcounter())`
Reverse score questions 4 and 5.  
We'll need to do this for both the data at time 1 _and_ at time 2.  


::: {.callout-tip collapse="true"}
#### Hints

- See [R7#reverse-coding](r07_qdata.html#reverse-coding){target="_blank"}
- __Be careful__!! if you have some code that reverse scores a question, and you run it twice, you will essentially reverse-reverse score the question, and it goes back to the original ordering!  

:::



`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

There's only 4, so let's do this individually for each question:  
```{r}
bbdat <- bbdat |> 
  mutate(
    t1_q4 = 6 - t1_q4,
    t1_q5 = 6 - t1_q5,
    t2_q4 = 6 - t2_q4,
    t2_q5 = 6 - t2_q5
)
head(bbdat)
```

`r solend()`

`r qbegin(qcounter())`
Take a look at the correlation of the time 1 stress measures again.  
What has changed?  
`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

The negative correlations are now positive!  
```{r}
cor(bbdat[,1:6])
```
`r solend()`


`r qbegin(qcounter())`
We're finally getting somewhere! Let's create a score for "stress" at time 1, and a score for "stress" at time 2.   

The description of the questionnaire says that we should take the __sum__ of the scores on each question, to get an overall measure of stress.  


::: {.callout-tip collapse="true"}
#### Hints

The function `rowSums()` should help us here! See an example in [R7#row-scoring](r07_qdata.html#row-scoring){target="_blank"}
 
:::


`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}
bbdat$t1_stress <- rowSums(bbdat[,1:6])
bbdat$t2_stress <- rowSums(bbdat[,8:13])
```

`r solend()`

`r qbegin(qcounter())`
Make a new column that represents the _change_ in stress for each person between the two timepoints.  
`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}
bbdat$stress_change <- bbdat$t2_stress - bbdat$t1_stress
```

`r solend()`

`r qbegin(qcounter())`
Provide some descriptive statistics for the stress scores at time 1 and at time 2, and of the 'change in stress' measure.


::: {.callout-tip collapse="true"}
#### Hints

The `describe()` function from the __psych__ package is often pretty useful for this kind of thing  

:::

`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}
library(psych)
bbdat |> 
  select(t1_stress, t2_stress, stress_change) |>
  describe()
```


`r solend()`




`r qbegin(qcounter())`
Plot the stress-change for each group of participants.  
Fit a linear model to investigate whether the different techniques (the timer game and the box-breathing) are associated with differences in stress change.   
`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`


It makes more sense to think of "nothing" as the reference level, so let's make that happen:  
```{r}
bbdat <- bbdat |>
  mutate(
    task = factor(task, levels=c("nothing","game","boxbreathing"))
  )

mod1 <- lm(stress_change ~ task, data = bbdat) 

summary(mod1)

```

We can make a nice plot of the data, alongside our model estimates. We can actually use the `effects()` package here too, just like we did for `lmer()`.  
```{r}
# plot the data
ggplot(bbdat, aes(x = task, y = stress_change)) + 
  # jittered points
  geom_jitter(width=.15, height=0, alpha=.2, size = 3) +
  # plot the model estimated means and CIs:
  geom_pointrange(
    data = effects::effect("task", mod1) |> as.data.frame(),
    aes(y=fit,ymin=lower,ymax=upper),
    position = position_nudge(x=.25)
  )
```


`r solend()`



